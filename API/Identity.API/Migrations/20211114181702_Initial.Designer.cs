// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyIssue.Identity.API.Infrastructure;

namespace MyIssue.Identity.API.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20211114181702_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyIssue.Identity.API.Model.Employee", b =>
                {
                    b.Property<string>("EmployeeLogin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<decimal>("EmployeePosition")
                        .HasColumnType("decimal(3,0)");

                    b.Property<string>("EmployeeSurname")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("EmployeeLogin");

                    b.HasIndex("EmployeePosition");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.EmployeeUser", b =>
                {
                    b.Property<string>("EmployeeLogin")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserLogin")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("EmployeeLogin", "UserLogin");

                    b.HasIndex("EmployeeLogin")
                        .IsUnique();

                    b.HasIndex("UserLogin")
                        .IsUnique();

                    b.ToTable("EmployeeUser");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.Position", b =>
                {
                    b.Property<decimal>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("decimal(3,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.User", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<decimal>("UserType")
                        .HasColumnType("decimal(3,0)");

                    b.HasKey("UserLogin");

                    b.HasIndex("UserType");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserLogin = "Admin",
                            Password = "1234",
                            UserType = 3m
                        });
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.UserType", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3)
                        .HasColumnType("decimal(3,0)")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1m,
                            Name = "Locked"
                        },
                        new
                        {
                            Id = 2m,
                            Name = "User"
                        },
                        new
                        {
                            Id = 3m,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.Employee", b =>
                {
                    b.HasOne("MyIssue.Identity.API.Model.Position", "Positions")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePosition")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.EmployeeUser", b =>
                {
                    b.HasOne("MyIssue.Identity.API.Model.Employee", "Employee")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("MyIssue.Identity.API.Model.EmployeeUser", "EmployeeLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyIssue.Identity.API.Model.User", "User")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("MyIssue.Identity.API.Model.EmployeeUser", "UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.User", b =>
                {
                    b.HasOne("MyIssue.Identity.API.Model.UserType", "UserTypes")
                        .WithMany("Users")
                        .HasForeignKey("UserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.Employee", b =>
                {
                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.User", b =>
                {
                    b.Navigation("EmployeeUser");
                });

            modelBuilder.Entity("MyIssue.Identity.API.Model.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
